head(train_data)
tail(test_data)
Step4:#data forecasting
#Fitting in ARIMA model For this example, we'll use an automated ARIMA model
model <- auto.arima(train_data$CO2)
# Forecasting for the test period
forecasts <- forecast(model, h = nrow(test_data))
Step4:#data forecasting
#Fitting in ARIMA model For this example, we'll use an automated ARIMA model
model <- auto.arima(train_data$CO2)
Step4:#data forecasting
#Fitting in ARIMA model For this example, we'll use an automated ARIMA model
model <- auto.arima(train_data$CO2)
model <- auto.arima(train_data$CO2)
# Forecasting for the test period
forecasts <- forecast(model, h = nrow(test_data))
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,
forecast = forecasts$mean)
# Evaluate the Model
comparison <- data.frame(Actual = test_data$CO2, Forecasted = forecasts$mean)
accuracy_metrics <- accuracy(forecasts, test_data$CO2)
# Plotting forecast value under actual value
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)", color = "Line Type")
# Residual analysis
residuals <- test_data$CO2 - forecasts$mean
Residual_df <- data.frame(Date = test_data$date, Residuals = residuals)
#Checking for normality of residuals
shapiro.test(residuals)
#Plotting residuals vs time
ggplot(Residual_df, aes(x = Date, y = Residuals)) +
geom_line() +
labs(title = "Residuals Over Time", x = "Date", y = "Residual")
shapiro_test <- residuals %>%
stats::shapiro.test()
shapiro_test
#Checking for normality of residual distribution
library(ggplot2)
# Assuming 'Residual_df' is your dataframe with residuals
ggplot(Residual_df, aes(x = Residuals)) +
geom_histogram(binwidth = 0.5, fill = "Green", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency")
Str_data
str(data)
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,
forecast = forecasts$mean)
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean)
#Data visualisation of time series plot
ggplot(data, aes(x = date, y = CO2)) + geom_line() +
labs(title = "Atmospheric CO2 in Hawaii (1958-2001)", x = "Date",
y = "CO2 (ppm)")
#Loading libraries and time series data (.csv file)
library(tidyverse)#For data manipulation
library(forecast) # For forecasting of time series analysis
library(zoo)      # For time series analysis
library(ggplot2)  #For data visualisation
data <- read.csv("hawai.csv")
#Checking the structure of data
str(data)
#Step.2.Conversion to time series format
- Thisis the step for converting the time series data into general
format (YYYY-MM)
- Using "as.year.mon" function from zoo package, the date was converted into
usual format of YYYY-MM.
#Conversion to distinct format (YYYY-MM)
data$date <- as.yearmon(data$time, "%Y.%m")
#Data visualisation of time series plot
ggplot(data, aes(x = date, y = CO2)) + geom_line() +
labs(title = "Atmospheric CO2 in Hawaii (1958-2001)", x = "Date",
y = "CO2 (ppm)")
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = forecasts$lower[, "85%"], ymax = forecasts$upper[, "95%"]), fill = "blue", alpha = 0.3) +  # Adding 95% confidence interval
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)", color = "Line Type")
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = forecasts$lower[, "85%"], ymax = forecasts$upper[, "95%"]), fill = "blue", alpha = 0.3) +  # Correcting percentiles for ymin and ymax
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)", color = "Line Type")
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = forecasts$lower[, "85%"], ymax = forecasts$upper[, "95%"]),
fill = "blue", alpha = 0.3) +
# Correcting percentiles for ymin and ymax labs(title = "Actual vs. Forecasted CO2 Levels",
x = "Date", y = "CO2 (ppm)", color = "Line Type")
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = forecasts$lower[, "85%"], ymax = forecasts$upper[, "95%"]),
fill = "blue", alpha = 0.3) +
x = "Date", y = "CO2 (ppm)", color = "Line Type")   # Correcting percentiles for ymin and ymax labs(title = "Actual vs. Forecasted CO2 Levels",
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = forecasts$lower[, "85%"], ymax = forecasts$upper[, "95%"]),
fill = "blue", alpha = 0.3) +  x = "Date", y = "CO2 (ppm)", color = "Line Type")
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = forecasts$lower[, "85%"], ymax = forecasts$upper[, "95%"]),
fill = "blue", alpha = 0.3) +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)", color = "Line Type")
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)",
color = "Line Type")
View(forecasts)
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean),
lower = forecasts[["lower"]][, "80%"],
upper = forecasts[["upper"]][, "80%"]
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean),
lower = forecasts[["lower"]][, "80%"],
upper = forecasts[["upper"]][, "80%"]
forecasts[["upper"]]
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean),
lower = forecasts[["lower"]][, "80%"],
upper = forecasts[["upper"]][, "80%"]
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean),
lower = forecasts[["lower"]][, "80%"], upper = forecasts[["upper"]][, "80%"]
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,
forecast = forecasts$mean,
lower = forecasts[["lower"]][, "80%"],
upper = forecasts[["upper"]][, "80%"])
ggplot(data = plot_data, aes(x = date)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey80", alpha = 0.5) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels",
x = "Date",
y = "CO2 (ppm)",
color = "Line Type") +
scale_color_manual(values = c("Actual" = "blue", "Forecast" = "red"))
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean),
lower = forecasts[["lower"]][, "80%"], upper = forecasts[["upper"]][, "95%"]
forecasts[["fitted"]]
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean),
lower = forecasts[["lower"]][, "80%"], upper = forecasts[["upper"]][, "95%"]
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,
forecast = forecasts$mean,
lower = forecasts[["lower"]][, "80%"],
upper = forecasts[["upper"]][, "95%"])
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)",
color = "Line Type")
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = forecasts$lower[, "85%"], ymax = forecasts$upper[, "95%"]),
fill = "blue", alpha = 0.3) +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)", color = "Line Type")
library(ggplot2)
# Create ggplot
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(title = "Actual vs. Forecasted CO2 Levels",
x = "Date", y = "CO2 (ppm)", color = "Line Type")
loti_arima |> forecast(h = nrow(test_data)) |> autoplot(loti_train)
autoplot(forecasts) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
autoplot(plot_data) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
autoplot(plot_data) + labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
# Create ggplot
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
install.packages("quarto")
# Create ggplot
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
View(forecasts)
forecasts[["upper"]]
#Loading libraries and time series data (.csv file)
library(tidyverse)#For data manipulation
library(forecast) # For forecasting of time series analysis
library(zoo)      # For time series analysis
library(ggplot2)  #For data visualisation
data <- read.csv("hawai.csv")
#Conversion to distinct format (YYYY-MM)
data$date <- as.yearmon(data$time, "%Y.%m")
#Data visualisation of time series plot
ggplot(data, aes(x = date, y = CO2)) + geom_line() +
labs(title = "Atmospheric CO2 in Hawaii (1958-2001)", x = "Date",
y = "CO2 (ppm)")
train_size <- floor(nrow(data) * 0.7)
train_data <- data[1:train_size, ]
test_data <- data[(train_size + 1):nrow(data), ]
nrow(train_data) / nrow(test_data) >= 0.7
model <- auto.arima(train_data$CO2)
test data ('nrow(test_data)')
# Forecasting for the test period
forecasts <- forecast(model, h = nrow(test_data))
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean),
# Evaluate the Model
-The separate dataframe is constructed to compare between actual and
# Create ggplot
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
residuals <- test_data$CO2 - forecasts$mean
Residual_df <- data.frame(Date = test_data$date, Residuals = residuals)
#Checking for normality of residuals
shapiro.test(residuals)
View(forecasts)
View(comparison)
View(forecasts)
View(model)
View(plot_data)
View(Residual_df)
View(shapiro_test)
View(test_data)
View(train_data)
#Loading libraries and time series data (.csv file)
library(tidyverse)#For data manipulation
library(forecast) # For forecasting of time series analysis
library(zoo)      # For time series analysis
library(ggplot2)  #For data visualisation
data <- read.csv("hawai.csv")
#Checking the structure of data
str(data)
#Conversion to distinct format (YYYY-MM)
data$date <- as.yearmon(data$time, "%Y.%m")
#Data visualisation of time series plot
ggplot(data, aes(x = date, y = CO2)) + geom_line() +
labs(title = "Atmospheric CO2 in Hawaii (1958-2001)", x = "Date",
y = "CO2 (ppm)")
train_size <- floor(nrow(data) * 0.7)
train_data <- data[1:train_size, ]
test_data <- data[(train_size + 1):nrow(data), ]
head(train_data)
tail(test_data)
nrow(train_data) / nrow(test_data) >= 0.7
nrow(train_data) + nrow(test_data) == nrow(data)
model <- auto.arima(train_data$CO2)
# Forecasting for the test period
forecasts <- forecast(model, h = nrow(test_data))
plot_data <- data.frame(date = test_data$date,
actual = test_data$CO2,forecast = forecasts$mean),
# Evaluate the Model
-The separate dataframe is constructed to compare between actual and
plot_data <- data.frame(date = test_data$date, actual = test_data$CO2,
forecast = forecasts$mean)
comparison <- data.frame(Actual = test_data$CO2, Forecasted = forecasts$mean)
accuracy_metrics <- accuracy(forecasts, test_data$CO2)
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)",
color = "Line Type")
# Create ggplot
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
train_data <- data[1:train_size, ]
# Create ggplot
ggplot(data = plot_data, aes(x = date)) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "blue", alpha = 0.3) +
labs(title = "ARIMA Forecast", x = "Date", y = "CO2 Concentration")
ggplot(data = plot_data, aes(x = date)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey80", alpha = 0.5) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels",
x = "Date",
y = "CO2 (ppm)",
color = "Line Type") +
scale_color_manual(values = c("Actual" = "blue", "Forecast" = "red"))
plot_data <- data.frame(
date = test_data$date,
actual = test_data$CO2,
forecast = forecasts$mean,
lower = forecasts$lower[, "80%"], # Replace with the correct column name for the 80% lower bound
upper = forecasts$upper[, "80%"]  # Replace with the correct column name for the 80% upper bound
)
ggplot(data = plot_data, aes(x = date)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey80", alpha = 0.5) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels",
x = "Date",
y = "CO2 (ppm)",
color = "Line Type") +
scale_color_manual(values = c("Actual" = "blue", "Forecast" = "red"))
View(accuracy_metrics)
View(forecasts)
View(forecasts)
plot_data <- data.frame(
date = test_data$date,
actual = test_data$CO2,
forecast = forecasts$mean,
lower = forecasts[["lower"]][, "80%"], # Replace with the correct column name for the 80% lower bound
upper = forecasts[["upper"]][, "80%"]  # Replace with the correct column name for the 80% upper bound
)
ggplot(data = plot_data, aes(x = date)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey80", alpha = 0.5) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels",
x = "Date",
y = "CO2 (ppm)",
color = "Line Type") +
scale_color_manual(values = c("Actual" = "blue", "Forecast" = "red"))
ggplot(data = plot_data, aes(x = date)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey80", alpha = 0.5) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels",
x = "Date",
y = "CO2 (ppm)",
color = "Line Type") +
scale_color_manual(values = c("Actual" = "blue", "Forecast" = "red"))
ggplot(data = plot_data, aes(x = date)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey80", alpha = 0.5) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)",
color = "Line Type") + scale_color_manual(values =
c("Actual" = "blue", "Forecast" = "red"))
ggplot(data = plot_data, aes(x = date)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey80", alpha = 0.5) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)",
color = "Line Type") + scale_color_manual(values =
c("Actual" = "blue", "Forecast" = "red"))
residuals <- test_data$CO2 - forecasts$mean
Residual_df <- data.frame(Date = test_data$date, Residuals = residuals)
#Checking for normality of residuals
shapiro.test(residuals)
#Plotting residuals vs time
ggplot(Residual_df, aes(x = Date, y = Residuals)) + geom_line() +
labs(title = "Residuals Over Time", x = "Date", y = "Residual")
ggplot(Residual_df, aes(x = Residuals)) +
geom_histogram(binwidth = 0.5, fill = "Green", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency")
View(accuracy_metrics)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("quarto")
#Loading libraries and time series data (.csv file)
library(tidyverse)#For data manipulation
library(forecast) # For forecasting of time series analysis
library(zoo)
#Loading libraries and time series data (.csv file)
library(tidyverse)#For data manipulation
library(forecast) # For forecasting of time series analysis
library(zoo)      # For time series analysis
library(ggplot2)  #For data visualisation
data <- read.csv("hawai.csv")
#Checking the structure of data
str(data)
#Step.2.Conversion to time series format
- Thisis the step for converting the time series data into general
format (YYYY-MM)
- Using "as.year.mon" function from zoo package, the date was converted into
usual format of YYYY-MM.
#Conversion to distinct format (YYYY-MM)
data$date <- as.yearmon(data$time, "%Y.%m")
#Data visualisation of time series plot
ggplot(data, aes(x = date, y = CO2)) + geom_line() +
labs(title = "Atmospheric CO2 in Hawaii (1958-2001)", x = "Date",
y = "CO2 (ppm)")
train_size <- floor(nrow(data) * 0.7)
train_data <- data[1:train_size, ]
test_data <- data[(train_size + 1):nrow(data), ]
#Inspecting the data
-The data inspection is done by checking the first 6 rows(head) of the
training data and last 6 rows(tail) from the test data.
head(train_data)
tail(test_data)
#checking if the test is good
-The proportions and row counts are done to verify if the test is good.
#checking the proportions
- In this step, the ratio of the  number of rows in the training set to the
number of rows in the test set is verified if they are greater than or equal
to 0.7, and if the value confirms true, the test is good.
nrow(train_data) / nrow(test_data) >= 0.7
#Checking row counts
- This is the check for the sum of the number of rows in the training set and
the number of rows in the test set. If they equals to the total number of rows,
it verifies all rows from original data are properly allocated to either sets.
nrow(train_data) + nrow(test_data) == nrow(data)
- The auto.arrima function helps to fit an ARIMA model to the training data.
This function selects the best ARIMA model based on Akaike Information
Criterion(AIC)
model <- auto.arima(train_data$CO2)
- The fitted model is then used to generate the forecast for the testing set
using 'forecast' function where the argument 'h' specifies the number of
forcast period, that equals to the number of rows in the
test data ('nrow(test_data)')
- Then data frame is constructed named 'plot_data' containing three columns
with date, actual CO2 and forecasted CO2 values.
# Forecasting for the test period
forecasts <- forecast(model, h = nrow(test_data))
plot_data <- data.frame(date = test_data$date, actual = test_data$CO2,
forecast = forecasts$mean)
# Evaluate the Model
-The separate dataframe is constructed to compare between actual and
forcasted CO2 values side by side.
-The accuracy metrics is calculated to evaluate the forecast performance.
The 'accuracy' function computed various accuracy measures like:
Mean Absolute Error (MAE), Root Mean Square Error(RMSE),
Mean Absolute Percentage Error(MAPE), etc.
comparison <- data.frame(Actual = test_data$CO2, Forecasted = forecasts$mean)
accuracy_metrics <- accuracy(forecasts, test_data$CO2)
# Plotting forecast value vs actual value
- To visualise the actual and forecasted CO2 levels over time, ggplot is used
to create a line plot with plot_data as a data frame and with X-axis
represented as date and Y-axis represented as actual and forcasted CO2 values,
differentiated by different colors and lines in the graph.Before it,
the data frame for plotting data is constructed defining upper and lower limits.
plot_data <- data.frame(
date = test_data$date,
actual = test_data$CO2,
forecast = forecasts$mean,
lower = forecasts[["lower"]][, "80%"],
upper = forecasts[["upper"]][, "80%"])
ggplot(data = plot_data, aes(x = date)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "grey80", alpha = 0.5) +
geom_line(aes(y = actual, color = "Actual"), linetype = "solid") +
geom_line(aes(y = forecast, color = "Forecast"), linetype = "dashed") +
labs(title = "Actual vs. Forecasted CO2 Levels", x = "Date", y = "CO2 (ppm)",
color = "Line Type") + scale_color_manual(values =
c("Actual" = "blue", "Forecast" = "red"))
**Interpretation**
The graph generated from the code visualise the increasing trends of
CO2 concentration over time. This has been generated after fitting data into
ARIMA model from forecast package. The graph shows 'Date'on X-axis with
'CO2 concentration (in ppm)' in Y-axis. In the graph, The forcasted value
(represented by red dotted lines) closely follow the actual CO2 concentration
(represented by blue solid line) throughout the test period. There is a very
slight deviations between the actual and forecasted values suggesting model
to effectively capture the pattern in CO2 data. The upper bound and lower
bound represented by shaded region in the graph are also under the confidence
interval with few exceptions near the period of end date. This graph indicates
the model could be effective for identifying long-term growth patterns in CO2.
# Residual analysis
- The residual value is calculated by subtracting forecasted values from the
actual CO2 values in the test data.
- Then, 'Residual_df' creates a dataframe with two columns containing date and
Residuals in columns.
- To test for the normality on the residuals, shapiro test is done using
'shapiro.test' function. The result outputs test static and p-value.
- The data visualisation is done by hisogram where residuals is plotted
against time using ggplot.
residuals <- test_data$CO2 - forecasts$mean
Residual_df <- data.frame(Date = test_data$date, Residuals = residuals)
#Checking for normality of residuals
shapiro.test(residuals)
#Plotting residuals vs time
ggplot(Residual_df, aes(x = Date, y = Residuals)) + geom_line() +
labs(title = "Residuals Over Time", x = "Date", y = "Residual")
ggplot(Residual_df, aes(x = Residuals)) +
geom_histogram(binwidth = 0.5, fill = "Green", color = "black") +
labs(title = "Histogram of Residuals", x = "Residuals", y = "Frequency")
**Interpretation**
The residual distribution illustrated in histogram shows the data are skewed to
the right which is also confirmed by the value of skewness coefficient
(W=0.98024) although the value is close to zero but is positive,
and p-value = 0.02307 which is statistically significant (<0.05). It means,
we reject null hypothesis and the data is not normally distributed.
**Conclusion**
The low p-values from the shapiro walkley test and test statistics shows the
data to be skewed rather than normally distributed. It might point some
suspicions on the reliability of data.
**Suggestions for improvement**
Various configurations of the ARIMA model could be explored such as altering
the autoregressive (AR), differencing (I), log transformations, and
moving average (MA) components. Modifying these parameters could stabilize
variances and maintain stationarity that makes the data more normally
distributed. Additional explanatory variables or external factors that could
impact the time series could be applied for transformation. These variables
might encompass seasonal influences, economic metrics, or environmental aspects.
The residuals of ARIMA model can be regularly observed and assessed to detect
any lingering patterns or structures that have not been captured by the model.
Utilizing diagnostic examinations like out-sampling testing can be done to
validate the models predictive power, for instance, autocorrelation and
residual plotscan pinpoint areas where enhancements may be needed.
install.packages("quarto")
library(quarto)
